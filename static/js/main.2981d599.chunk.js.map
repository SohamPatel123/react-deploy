{"version":3,"sources":["Grid.js","App.js","reportWebVitals.js","Reset.js","index.js"],"names":["Grid","Gridspace","document","getElementById","createElement","i","row","insertRow","_loop","j","cell","insertCell","addEventListener","event","target","style","backgroundColor","sessionStorage","getItem","setAttribute","css","concat","styleSheet","cssText","appendChild","createTextNode","getElementsByTagName","childNodes","length","App","window","onbeforeunload","setItem","location","href","localStorage","JSON","stringify","onload","clear","react_default","a","className","es","onChangeComplete","color","console","log","hex","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Reset","type","onClick","querySelectorAll","forEach","element","id","ReactDOM","createRoot","render","StrictMode","src_App","src_Grid","src_Reset"],"mappings":"4JA+BeA,MA7Bf,WAOI,IALJ,IAAMC,EAAYC,SAASC,eAAe,QAIpCH,EAAOE,SAASE,cAAc,SACvBC,EAAI,EAAGA,EAJH,GAIiBA,IAE1B,IADA,IAAMC,EAAMN,EAAKO,YADcC,EAAA,SAEtBC,GACL,IAAMC,EAAOJ,EAAIK,aACjBD,EAAKE,iBAAiB,QAAQ,SAACC,GAC/BA,EAAMC,OAAOC,MAAMC,gBAAmBC,eAAeC,QAAQ,SAAWD,eAAeC,QAAQ,SAPrF,QAQVR,EAAKS,aAAa,KAAK,QAEvB,IAAIC,EAAG,qCAAAC,OAAyCJ,eAAeC,QAAQ,SAAWD,eAAeC,QAAQ,SAV/F,QAUH,OACHH,EAAQb,SAASE,cAAc,SAC/BW,EAAMO,WACRP,EAAMO,WAAWC,QAAUH,EAE3BL,EAAMS,YAAYtB,SAASuB,eAAeL,IAC5ClB,SAASwB,qBAAqB,QAAQ,GAAGF,YAAYT,MAZhDN,EAAI,EAAGA,EALP,GAKqBA,IAAKD,IAiBlB,KADNP,EAAU0B,WAAY1B,EAAU0B,WAAW,IAC9CC,QACZ3B,EAAUuB,YAAYxB,ICDX6B,MAvBf,WAiBA,OAfAC,OAAOC,eAAiB,WACtBd,eAAee,QAAQ,SAAUF,OAAOG,SAASC,MACjDjB,eAAee,QAAQ,QAAQ,SAC/BG,aAAaH,QAAQ,OAAOI,KAAKC,UAAUrC,KAE7C8B,OAAOQ,OAAS,WACXR,OAAOG,SAASC,OAASjB,eAAeC,QAAQ,WACjDD,eAAesB,SASjBC,EAAAC,EAAArC,cAAA,OAAKsC,UAAU,OACfF,EAAAC,EAAArC,cAACuC,EAAA,EAAD,CAAcD,UAAU,UAAUE,iBAPP,SAACC,GAC5BC,QAAQC,IAAIF,EAAMG,KAClB/B,eAAee,QAAQ,QAAQa,EAAMG,UCPxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCMCY,MAZf,WAKE,OACEtB,EAAAC,EAAArC,cAAA,WACEoC,EAAAC,EAAArC,cAAA,UAAQ2D,KAAK,SAASC,QANH,WACrB9D,SAAS+D,iBAAiB,aAAaC,QAAQ,SAACC,GAAYA,EAAQpD,MAAMC,gBAAkB,WAK3CoD,GAAG,aAAlD,WCAOC,IAASC,WAAWpE,SAASC,eAAe,SACpDoE,OACH/B,EAAAC,EAAArC,cAACoC,EAAAC,EAAM+B,WAAP,KACEhC,EAAAC,EAAArC,cAACqE,EAAD,MACAjC,EAAAC,EAAArC,cAACsE,EAAD,MACAlC,EAAAC,EAAArC,cAACuE,EAAD,QAOJ1B","file":"static/js/main.2981d599.chunk.js","sourcesContent":["import './App';\n\nfunction Grid(){\n\nconst Gridspace = document.getElementById('Grid');\nconst NUM_ROWS = 32;\nconst NUM_COLS = 32;\nconst DEFAULT_COLOR = \"white\";\n  let Grid = document.createElement('table')\n    for (let i = 0; i < NUM_ROWS; i++) {\n        const row = Grid.insertRow();\n        for (let j = 0; j < NUM_COLS; j++) {\n            const cell = row.insertCell();\n            cell.addEventListener(\"click\",(event) =>{\n            event.target.style.backgroundColor = (sessionStorage.getItem(\"color\") ? sessionStorage.getItem(\"color\") : DEFAULT_COLOR);\n            cell.setAttribute('id','cell')\n\n            var css = `table td:hover{ background-color: ${(sessionStorage.getItem(\"color\") ? sessionStorage.getItem(\"color\") : DEFAULT_COLOR)}  }`;\n            var style = document.createElement('style');\n            if (style.styleSheet)\n              style.styleSheet.cssText = css;\n            else \n              style.appendChild(document.createTextNode(css));\n            document.getElementsByTagName('head')[0].appendChild(style);\n            })\n        }\n    }\n    let children = Gridspace.childNodes? Gridspace.childNodes:[]\n    if(children.length===0)\n    Gridspace.appendChild(Grid)\n}\nexport default Grid;","import \"./App.css\";\nimport React from \"react\";\nimport { CirclePicker } from \"react-color\";\nimport Grid from \"./Grid\";\n\nfunction App() {\n\nwindow.onbeforeunload = function(){\n  sessionStorage.setItem(\"origin\", window.location.href);\n  sessionStorage.setItem(\"color\",\"white\");\n  localStorage.setItem(\"Grid\",JSON.stringify(Grid));\n}\nwindow.onload = function(){\n  if(window.location.href === sessionStorage.getItem(\"origin\")){\n    sessionStorage.clear();\n  }\n}\nconst handleChangeComplete = (color) => {\n  console.log(color.hex);\n  sessionStorage.setItem(\"color\",color.hex);\n};\n\nreturn (\n  <div className=\"App\">\n  <CirclePicker className=\"circles\" onChangeComplete={handleChangeComplete} />\n  </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nfunction Reset() {\n  const onClickHandler = () => {\n    document.querySelectorAll('[id=cell]').forEach((element)=> {element.style.backgroundColor = \"white\"})\n  };\n\n  return (\n    <div>\n      <button type=\"button\" onClick={onClickHandler} id=\"reset_btn\">Reset</button>\n    </div>\n    )\n}\n\nexport default Reset;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Grid from './Grid';\nimport Reset from './Reset';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n    <Grid />  \n    <Reset />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}